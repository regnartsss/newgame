from aiogram import types
from loader import dp, bot, storage
from aiogram.dispatcher import FSMContext
from utils import sql
from text import texting
from text.buy import textsell
from keyboards import keyboard
from work import Build, Users, Training, Fight, Top
# from work.BattleCastle import Castle
from work.Buy import function_buy, Buy, buy_qiwi, buy_amount
from work.Map import new_maps
from data.config import admins
from work.BattleTower import start_battle_tower


def reload_module_text():
    import importlib
    importlib.reload(texting)
    print(texting.test)
    importlib.reload(keyboard)
    importlib.reload(Build)
    importlib.reload(Fight)
    importlib.reload(Users)
    importlib.reload(Training)


@dp.message_handler(lambda c: c.from_user.id in admins)
async def admin(message: types.Message):
    print(message.text)
    user_id = message.from_user.id
    if message.text == "reload":
        reload_module_text()
        await message.answer("–ú–æ–¥—É–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        print(texting.test)
    elif message.text == "111":
        await storage.set_data(chat=user_id, data={"message_id": message.message_id + 1})
    elif message.text == "222":
        await start_battle_tower()


@dp.message_handler(state=Users.NewName.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.finish()
    await sql.sql_insert("UPDATE heroes SET nik_name = '%s' WHERE user_id = %s" % (message.text, message.chat.id))
    await message.answer(text=texting.text_main_menu % message.text, reply_markup=keyboard.keyboard_main_menu())


@dp.message_handler(state=Buy.amount)
async def process_name(message: types.Message, state: FSMContext):
    await function_buy(message, state)


@dp.message_handler(text=texting.button_heroes)
async def info(message: types.Message):
    await message.answer(text=await Users.info_heroes(message))


@dp.message_handler(text=texting.button_castle)
async def stop(message: types.Message):
    await message.answer(text="üèò –î–æ–º–æ–π", reply_markup=keyboard.keyboard_main_menu())


@dp.message_handler(text=texting.button_mining_ataka)
async def stop(message: types.Message):
    await message.answer(text=texting.text_mining_ataka, reply_markup=keyboard.keyboard_map())
    await Fight.mining_attack(message)


@dp.message_handler(text=texting.button_location)
async def stop(message: types.Message):
    pass
    # Location(message=message).keyboard_warrior()


@dp.message_handler(text=texting.button_back)
async def back(message: types.Message):
    await message.answer(text=texting.button_back, reply_markup=keyboard.keyboard_main_menu())


@dp.message_handler(text=texting.button_buy_cancel)
async def buy_cancel(message: types.Message):
    await message.answer(texting.button_buy_cancel, reply_markup=keyboard.keyboard_main_menu())


@dp.message_handler(text=texting.button_top)
async def top_heroes(message: types.Message):
    await message.answer(text=texting.button_top, reply_markup=keyboard.keyboard_statisctick())


@dp.message_handler(text=texting.button_top_heroes)
async def top_heroes(message: types.Message):
    await message.answer(text=await Top.top_heroes(message))


@dp.message_handler(text=texting.button_top_castle)
async def top_castle(message: types.Message):
    await message.answer(text=await Top.top_castle(message))


@dp.message_handler(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å")
async def top_castle(message: types.Message):
    bot_username = (await bot.me).username
    bot_link = f"https://t.me/{bot_username}?start={message.chat.id}"
    await message.answer("–î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–≥–∞ –æ—Ç–ø—Ä–∞–≤—Ç—å –µ–º—É —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ. \n"
                         "–ò –ø–æ–ª—É—á–∏ üíé –∑–∞ –∫–∞–∂–¥—ã–π –≤–∑—è—Ç—ã–π –∏–º —É—Ä–æ–≤–µ–Ω—å")
    await message.answer(bot_link)


@dp.message_handler(text=texting.button_attack)
async def top_castle(message: types.Message):
    await Fight.fight(message=message, call='')

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def all_other_messages(message: types.Message):
    print("ff")
    if "f" == 1:
        pass
        # print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        # await message.answer("–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        data_old = await sql.sql_selectone("select message_id from heroes where user_id = %s" % message.chat.id)
        # if data_old[0] != 0:
        #     try:
        #         print("–ù–∞–¥–æ —É–¥–∞–ª–∏—Ç—å")
        #         await bot.delete_message(message.chat.id, data_old[0])
        #     except Exception as n:
        #         print("–ù–µ —á–µ–≥–æ —É–¥–∞–ª—è—Ç—å %s" % n)
        #     await sql.sql_insert("update heroes set message_id = 0 where user_id = %s" % message.chat.id)

        if message.text in texting.list_Maps:
            pass
        # –î–æ–º–æ–π
        # elif message.text == texting.button_castle:
        #     await bot.send_message(text="üèò –î–æ–º–æ–π", chat_id=message.chat.id, reply_markup=keyboard.keyboard_main_menu())
        # –ö–æ–ø–∞—Ç—å
        # elif message.text == texting.button_mining:
        #     await Map.timer_mining(message, "start")

        # elif message.text == texting.button_mining_ataka:
        #     await message.answer(text=texting.text_mining_ataka, reply_markup=keyboard.keyboard_map())
        #     await Fight.mining_attack(message)
        # –ù–∞–∑–∞–¥

        # –ò–Ω—Ñ–æ –≥–µ—Ä–æ–π
        # elif message.text == texting.button_heroes:
        #     await Users.info_heroes(message)
            # await message.answer(text=Users.info_heroes(message, key))
            # await message.answer(text=Users.info_heroes(message, key="build"))
        # –ê—Ç–∞–∫–æ–≤–∞—Ç—å

        # C—Ç—Ä–æ–µ–Ω–∏–µ
        # elif message.text == texting.button_building:
        #     menu = "building"
        #     await sql.sql_insert(
        #         "update heroes set message_id = %s where user_id = %s" % (message.message_id + 1, message.chat.id))
        #     await Build.building(message=message)
        elif message.text == texting.button_setting:
            menu = "info"
            await bot.send_message(text=texting.text_setting, chat_id=message.chat.id,
                                   reply_markup=keyboard.keyboard_info())
        elif message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
            menu = "feedback"
            await bot.send_message(
                text="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏. \n –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ —Å–ª—É—á–∞–π–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'",
                chat_id=message.chat.id, reply_markup=keyboard.keyboard_info())
            # bot.register_next_step_handler(message, please)
        elif message.text == "–ü–æ–º–æ—á—å –ø—Ä–æ–µ–∫—Ç—É":
            menu = "feedback"
            await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=keyboard.keyboard_buy())
        # elif message.text == "Tranzzo":
        #     menu = "Tranzzo"
        #     buy.buy_amount(message)
        elif message.text == "QIWI":
            await message.answer(textsell, reply_markup=keyboard.keyboard_buy_cancel())
            await Buy.amount.set()
            # await buy_amount(message)
            # await message.answer(text="–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ", reply_markup=await buy_qiwi(message))

        elif message.text == texting.button_start:
            await Users.start_user_name(message)
        elif message.text == "üí¨ –ß–∞—Ç":
            await bot.send_message(message.chat.id,
                                   "–ß–∞—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏—è –±–∞–≥–æ–≤ @heroeslifeg")

        # elif message.text == texting.button_help:
        #     pass
        #     help(message)


        # elif message.text == "üóº –û—Å–∞–¥–∞ –±–∞—à–Ω–∏":
        #     Location(message=message).location()

        # elif message.text == '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –±–∞—à–Ω–∏':
        #     statisctick(message, "all")
        # elif message.text == '–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–æ–π –∑–∞ –±–∞—à–Ω–∏':
        #     statisctick(message, "one")
        # elif message.text == "–í—Ä–µ–º—è":
        #     test()
        # –ú–∞–≥–∞–∑–∏–Ω

        elif message.text == "–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É":
            await message.answer(text=await new_maps())


        # elif message.text == texting.button_castle_escape_field:
        #     Castle(message).castle_escape_field()
        else:
            print(message.text)
